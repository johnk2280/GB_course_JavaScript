/**
 * 1. Задать температуру в градусах по Цельсию. Вывести в alert соответствующую температуру в градусах по Фаренгейту.
 Подсказка: расчёт идёт по формуле: Tf = (9 / 5) * Tc + 32, где Tf – температура по Фаренгейту,
 Tc – температура по Цельсию
 */

function convertTemperature(degrees) {
    return (9 / 5) * degrees + 32
}

let degrees = parseFloat(prompt('Введите температуру в градусах по Цельсию: '));
alert(`Температура по Фаренгейту: ${convertTemperature(degrees)}`);


/**
 * 2. Работа с переменными.
 3. Объявить две переменные: admin и name. Записать в name строку "Василий"; Скопировать значение из name в admin.
 Вывести admin (должно вывести «Василий»).
 */

let name = 'Василий';
let admin;

admin = name
console.log(admin)

/**
 * 4. *Чему будет равно JS-выражение 1000 + "108"
 Ответ: Cтрока '1000108'. Т.к. происходит сложения числа со строкой, интерпритатор преводит число в строку
 и конкатенируюет со втройо строкой.
 */

let result = 1000 + '108'
console.log(result)

/**
 * 5. *Самостоятельно разобраться с атрибутами тега script (async и defer)
 *
 * Ответ:
 * Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме,
 * а затем запустить этот скрипт, когда он загрузится.
 * Скрипты с defer никогда не блокируют страницу.
 * Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.
 *
 * Атрибут async означает, что скрипт абсолютно независим:
 * Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
 * Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
 * DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того,
 * как страница будет готова), так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше).
 * Остальные скрипты не ждут async, и скрипты c async не ждут другие скрипты.
 */

